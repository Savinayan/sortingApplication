@{
    ViewBag.Title = "Home Page";
}
<script type="text/javascript">

</script>
<div class="jumbotron">
    <h1>Fun With Sorting</h1>
    <p class="lead">Please select a sorting type</p>
</div>

<div class="row">
    <div class="col-md-4">
        <h2>Bubble Sort</h2>
        <p>
            Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order
        </p>
        <p><a class="btn btn-default" href="#" onclick="location.href='@Url.Action("BubbleSort", "Home")'">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Insertion Sort</h2>
        <p>
            Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time.
        </p>
        <p><a class="btn btn-default" href="#" onclick="location.href='@Url.Action("InsertionSort", "Home")'">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Selection Sort</h2>
        <p>
            The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array
        </p>
        <p><a class="btn btn-default" href="#" onclick="location.href='@Url.Action("SelectionSort", "Home")'">Learn more &raquo;</a></p>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <h2>Quick Sort</h2>
        <p>
            Quick sort is a highly efficient sorting algorithm and is based on partitioning of array of data into smaller arrays. ... Quick sort partitions an array and then calls itself recursively twice to sort the two resulting subarrays.
        </p>
        <p><a class="btn btn-default" href="#" onclick="location.href='@Url.Action("QuickSort", "Home")'">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Merge Sort</h2>
        <p>
            Like QuickSort, Merge Sort is a Divide and Conquer algorithm. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. The merge() function is used for merging two halves. The merge(arr, l, m, r) is key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one. See following C implementation for details.
        </p>
        <p><a class="btn btn-default" href="#" onclick="location.href='@Url.Action("MergeSort", "Home")'">Learn more &raquo;</a></p>
    </div>
    
</div>